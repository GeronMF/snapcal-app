import AsyncStorage from '@react-native-async-storage/async-storage';
import { Meal } from '../types';

const API_BASE_URL = 'https://snapcal.fun';

// –¢–∏–ø—ã –¥–ª—è API –æ—Ç–≤–µ—Ç–æ–≤
interface ApiResponse<T> {
  data: T;
  success: boolean;
  message?: string;
}

// –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API
class ApiClient {
  private baseURL: string;

  constructor(baseURL: string) {
    this.baseURL = baseURL;
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  private async getAuthToken(): Promise<string | null> {
    try {
      const token = await AsyncStorage.getItem('token');
      console.log('üîë Auth token retrieved:', token ? `${token.substring(0, 20)}...` : 'null');
      return token;
    } catch (error) {
      console.error('Error getting auth token:', error);
      return null;
    }
  }

  // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
  private async request<T>(endpoint: string, options: RequestInit = {}): Promise<ApiResponse<T>> {
    const url = `${this.baseURL}${endpoint}`;
    const token = await this.getAuthToken();

    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
    };

    if (token) {
      headers.Authorization = `Bearer ${token}`;
    }

    console.log('API Request:', options.method || 'GET', url);

    try {
      const response = await fetch(url, {
        ...options,
        headers,
      });

      if (!response.ok) {
        console.error(`HTTP error! status: ${response.status}`);
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      return data;
    } catch (error) {
      console.error('API request failed:', error);

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
      if (error instanceof TypeError && error.message.includes('Network request failed')) {
        console.error('Network error details:');
        console.error('- URL:', url);
        console.error('- This usually means:');
        console.error('  1. Server is down or unreachable');
        console.error('  2. Network connectivity issues');
        console.error('  3. CORS or firewall blocking the request');
        console.error('  4. Invalid URL or SSL certificate issues');
      }

      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∏–µ–º–∞–º–∏ –ø–∏—â–∏
  async getMeals(): Promise<ApiResponse<Meal[]>> {
    return this.request<Meal[]>('/api/meals');
  }

  async createMeal(mealData: {
    name: string;
    calories: number;
    protein?: number;
    carbs?: number;
    fat?: number;
    imageUri?: string;
    comment?: string;
    date?: string;
    // AI –ø–æ–ª—è
    language?: string;
    ai_confidence?: number;
    ai_provider?: string;
    portions?: string;
    regional?: boolean;
  }): Promise<ApiResponse<Meal>> {
    return this.request<Meal>('/api/meals', {
      method: 'POST',
      body: JSON.stringify(mealData),
    });
  }

  async updateMeal(id: string, mealData: Partial<Meal>): Promise<ApiResponse<Meal>> {
    return this.request<Meal>(`/api/meals/${id}`, {
      method: 'PUT',
      body: JSON.stringify(mealData),
    });
  }

  async deleteMeal(id: string): Promise<ApiResponse<void>> {
    return this.request<void>(`/api/meals/${id}`, {
      method: 'DELETE',
    });
  }

  // AI –∞–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –µ–¥—ã
  async analyzeFood(imageUri: string, comment?: string, language?: string): Promise<ApiResponse<{
    name: string;
    calories: number;
    protein: number;
    carbs: number;
    fat: number;
    confidence: number;
    portions: string;
    regional?: boolean;
  }>> {
    const formData = new FormData();

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    formData.append('image', {
      uri: imageUri,
      type: 'image/jpeg',
      name: 'food.jpg',
    } as any);

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –µ—Å–ª–∏ –µ—Å—Ç—å
    if (comment) {
      formData.append('comment', comment);
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —è–∑—ã–∫ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if (language) {
      formData.append('language', language);
    }

    const token = await this.getAuthToken();
    const headers: Record<string, string> = {};

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if (token) {
      headers.Authorization = `Bearer ${token}`;
    }

    // –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º Content-Type –¥–ª—è FormData - –±—Ä–∞—É–∑–µ—Ä —Å–∞–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å boundary

    console.log('AI Analysis Request:', `${this.baseURL}/api/ai/analyze`);
    console.log('Using auth token:', token ? 'Yes' : 'No');

    // –†–∞–∑—É–º–Ω—ã–µ —Ç–∞–π–º–∞—É—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const AI_TIMEOUT = 20000; // 20 —Å–µ–∫—É–Ω–¥ - –º–∞–∫—Å–∏–º—É–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≥–æ—Ç–æ–≤ –∂–¥–∞—Ç—å
    const RETRY_ATTEMPTS = 2;
    const RETRY_DELAY = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏

    for (let attempt = 1; attempt <= RETRY_ATTEMPTS; attempt++) {
      try {
        console.log(`üîç –ü–æ–ø—ã—Ç–∫–∞ ${attempt}/${RETRY_ATTEMPTS} AI –∞–Ω–∞–ª–∏–∑–∞...`);
        
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–ø—Ä–æ—Å–∞ –ø–æ —Ç–∞–π–º–∞—É—Ç—É
        const controller = new AbortController();
        const timeoutId = setTimeout(() => {
          console.log(`‚è∞ –¢–∞–π–º–∞—É—Ç ${AI_TIMEOUT}ms –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`);
          controller.abort();
        }, AI_TIMEOUT);

        const response = await fetch(`${this.baseURL}/api/ai/analyze`, {
          method: 'POST',
          headers,
          body: formData,
          signal: controller.signal,
        });

        clearTimeout(timeoutId);
        console.log(`AI Response status: ${response.status} (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);

        if (!response.ok) {
          const errorText = await response.text();
          console.error(`HTTP error! status: ${response.status}, body: ${errorText}`);
          
          // –ï—Å–ª–∏ 408 (Request Timeout) –∏–ª–∏ 504 (Gateway Timeout), –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑
          if ((response.status === 408 || response.status === 504) && attempt < RETRY_ATTEMPTS) {
            console.log(`‚è≥ –¢–∞–π–º–∞—É—Ç —Å–µ—Ä–≤–µ—Ä–∞, –∂–¥–µ–º ${RETRY_DELAY}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
            continue;
          }
          
          throw new Error(`HTTP error! status: ${response.status}`);
        }

        const data = await response.json();
        console.log('AI Analysis successful:', data);
        return data;
        
      } catch (error: any) {
        console.error(`AI Analysis request failed (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}):`, error);

        // –£–ª—É—á—à–µ–Ω–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–æ–∫
        if (error.name === 'AbortError') {
          console.error(`‚è∞ AI –∞–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ (${AI_TIMEOUT}ms) –Ω–∞ –ø–æ–ø—ã—Ç–∫–µ ${attempt}`);
          
          if (attempt < RETRY_ATTEMPTS) {
            console.log(`‚è≥ –ñ–¥–µ–º ${RETRY_DELAY}ms –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º...`);
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
            continue;
          }
          
          throw new Error('AI –∞–Ω–∞–ª–∏–∑ –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        } else if (error instanceof TypeError && error.message.includes('Network request failed')) {
          console.error('üåê –ü—Ä–æ–±–ª–µ–º–∞ —Å —Å–µ—Ç–µ–≤—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
          
          if (attempt < RETRY_ATTEMPTS) {
            console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏–∑-–∑–∞ —Å–µ—Ç–µ–≤–æ–π –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ ${RETRY_DELAY}ms...`);
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
            continue;
          }
          
          throw new Error('–ü—Ä–æ–±–ª–µ–º–∞ —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.');
        } else if (error instanceof TypeError && (
          error.message.includes('timeout') ||
          error.message.includes('timed out')
        )) {
          console.error('‚è∞ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è');
          
          if (attempt < RETRY_ATTEMPTS) {
            console.log(`‚è≥ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∏–∑-–∑–∞ —Ç–∞–π–º–∞—É—Ç–∞ —á–µ—Ä–µ–∑ ${RETRY_DELAY}ms...`);
            await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
            continue;
          }
          
          throw new Error('–°–µ—Ä–≤–µ—Ä AI –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        }

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (attempt === RETRY_ATTEMPTS) {
          throw error;
        }
        
        console.log(`üîÑ –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ ${RETRY_DELAY}ms...`);
        await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
      }
    }

    // –≠—Ç–æ—Ç –∫–æ–¥ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –≤—ã–ø–æ–ª–Ω–∏—Ç—å—Å—è, –Ω–æ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    throw new Error('–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ AI –∞–Ω–∞–ª–∏–∑–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–µ–π');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
export const apiClient = new ApiClient(API_BASE_URL); 