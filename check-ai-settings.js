const mysql = require('mysql2/promise');
require('dotenv').config();

async function checkAISettings() {
  let connection;
  
  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root', 
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'snapcal',
      charset: 'utf8mb4'
    });

    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const [rows] = await connection.execute('SELECT * FROM ai_settings ORDER BY setting_key');
    
    console.log('\nüìä –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI:');
    console.log('==========================================');
    for (const row of rows) {
      console.log(`${row.setting_key}: ${row.setting_value}`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    const criticalSettings = {
      'active_ai_provider': 'openai',
      'openai_enabled': 'true',
      'gemini_enabled': 'true'
    };

    console.log('\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    
    for (const [key, expectedValue] of Object.entries(criticalSettings)) {
      const [existing] = await connection.execute(
        'SELECT setting_value FROM ai_settings WHERE setting_key = ?',
        [key]
      );
      
      const currentValue = existing.length > 0 ? existing[0].setting_value : null;
      
      if (currentValue !== expectedValue) {
        console.log(`‚ö†Ô∏è  ${key}: ${currentValue} ‚Üí ${expectedValue}`);
        
        await connection.execute(`
          INSERT INTO ai_settings (setting_key, setting_value, description)
          VALUES (?, ?, ?)
          ON DUPLICATE KEY UPDATE 
          setting_value = VALUES(setting_value),
          updated_at = CURRENT_TIMESTAMP
        `, [key, expectedValue, `Fixed by check script`]);
        
        console.log(`‚úÖ ${key} –∏—Å–ø—Ä–∞–≤–ª–µ–Ω`);
      } else {
        console.log(`‚úÖ ${key}: ${currentValue} (OK)`);
      }
    }

    console.log('\nüéâ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ');
    }
  }
}

 