const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');
require('dotenv').config();

/**
 * Deploy AI provider migration to production
 */
async function deployAIMigration() {
  console.log('üöÄ Starting AI Provider Migration deployment...');
  
  let connection;
  
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    console.log('üì¶ Connecting to database...');
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      port: process.env.DB_PORT || 3306,
      database: process.env.DB_NAME || 'snapcal',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || ''
    });
    
    console.log('‚úÖ Database connected successfully');

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ë–î
    console.log('\nüìä Checking current database state...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    const [tables] = await connection.execute("SHOW TABLES");
    const tableNames = tables.map(row => Object.values(row)[0]);
    
    console.log('üóÉÔ∏è Existing tables:', tableNames.join(', '));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã users
    if (tableNames.includes('users')) {
      const [usersStructure] = await connection.execute("DESCRIBE users");
      console.log('üë§ Users table structure:');
      usersStructure.forEach(col => {
        if (col.Field === 'id') {
          console.log(`   id: ${col.Type} ${col.Key} ${col.Extra}`);
        }
      });
    }
    
    const hasAiSettings = tableNames.includes('ai_settings');
    const hasAiUsageStats = tableNames.includes('ai_usage_stats');
    
    console.log(`üìä ai_settings table: ${hasAiSettings ? '‚úÖ Exists' : '‚ùå Missing'}`);
    console.log(`üìä ai_usage_stats table: ${hasAiUsageStats ? '‚úÖ Exists' : '‚ùå Missing'}`);

    // –ß–∏—Ç–∞–µ–º –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
    console.log('\nüîÑ Executing AI migration...');
    
    const migrationPath = path.join(__dirname, '../database/migrations/003_ai_settings.sql');
    
    if (!fs.existsSync(migrationPath)) {
      throw new Error(`Migration file not found: ${migrationPath}`);
    }
    
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    console.log('üìÑ Migration file loaded');
    console.log(`üìä File size: ${migrationSQL.length} characters`);
    console.log(`üìä First 200 characters: ${migrationSQL.substring(0, 200).replace(/\r?\n/g, '\\n')}`);
    
    // –†–∞–∑–±–∏–≤–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    const sqlCommands = migrationSQL
      .replace(/\r\n/g, '\n') // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º line endings
      .split(';')
      .map(cmd => cmd.trim())
      .filter(cmd => {
        // –£–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        const lines = cmd.split('\n').filter(line => !line.trim().startsWith('--')).join('\n').trim();
        return lines.length > 0;
      });
    
    console.log(`üìä Found ${sqlCommands.length} SQL commands to execute`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    sqlCommands.forEach((cmd, i) => {
      console.log(`üìù Command ${i + 1}: ${cmd.substring(0, 100).replace(/\n/g, ' ')}...`);
    });
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –ø–æ –æ–¥–Ω–æ–π
    for (let i = 0; i < sqlCommands.length; i++) {
      const command = sqlCommands[i];
      if (command.length > 0) {
        try {
          console.log(`‚è≥ Executing command ${i + 1}/${sqlCommands.length}...`);
          await connection.execute(command);
          console.log(`‚úÖ Command ${i + 1} executed successfully`);
        } catch (cmdError) {
          console.error(`‚ùå Command ${i + 1} failed:`, cmdError.message);
          console.log('Failed command:', command.substring(0, 100) + '...');
          throw cmdError;
        }
      }
    }
    
    console.log('‚úÖ AI migration executed successfully');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìä Verifying migration results...');
    
    const [newTables] = await connection.execute("SHOW TABLES");
    const newTableNames = newTables.map(row => Object.values(row)[0]);
    
    const nowHasAiSettings = newTableNames.includes('ai_settings');
    const nowHasAiUsageStats = newTableNames.includes('ai_usage_stats');
    
    console.log(`üìä ai_settings table: ${nowHasAiSettings ? '‚úÖ Created/Exists' : '‚ùå Failed'}`);
    console.log(`üìä ai_usage_stats table: ${nowHasAiUsageStats ? '‚úÖ Created/Exists' : '‚ùå Failed'}`);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ AI
    if (nowHasAiSettings) {
      const [settings] = await connection.execute('SELECT setting_key, setting_value FROM ai_settings');
      console.log('\n‚öôÔ∏è AI Settings:');
      settings.forEach(setting => {
        console.log(`   ${setting.setting_key}: ${setting.setting_value}`);
      });
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Gemini –∫–ª—é—á –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    if (nowHasAiSettings && process.env.GEMINI_API_KEY) {
      console.log('\nüîë Setting up Gemini API key...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª—é—á
      const [existingKeys] = await connection.execute(
        "SELECT setting_value FROM ai_settings WHERE setting_key = 'gemini_api_key'"
      );
      
      if (existingKeys.length === 0) {
        await connection.execute(`
          INSERT INTO ai_settings (setting_key, setting_value, description)
          VALUES ('gemini_api_key', ?, 'Gemini API key for AI analysis')
        `, [process.env.GEMINI_API_KEY]);
        console.log('‚úÖ Gemini API key added to settings');
      } else {
        console.log('‚ÑπÔ∏è Gemini API key already exists in settings');
      }
    }

    console.log('\nüéâ AI Provider Migration deployment completed successfully!');
    console.log('\nüìã Next steps:');
    console.log('1. Restart the application: node src/index.js');
    console.log('2. Check AI status: GET /api/ai/status');
    console.log('3. Test Admin AI: GET /api/admin/ai/status');
    console.log('4. Try Gemini provider: POST /api/admin/ai/switch {"provider": "gemini"}');

  } catch (error) {
    console.error('\n‚ùå Migration deployment failed:', error.message);
    console.error('Full error:', error);
    process.exit(1);
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîå Database connection closed');
    }
  }
}

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏
deployAIMigration(); 