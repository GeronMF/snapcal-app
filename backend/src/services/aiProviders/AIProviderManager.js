const OpenAIProvider = require('./OpenAIProvider');
const GeminiProvider = require('./GeminiProvider');

/**
 * –ú–µ–Ω–µ–¥–∂–µ—Ä AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 * –£–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É —Ä–∞–∑–Ω—ã–º–∏ AI —Å–µ—Ä–≤–∏—Å–∞–º–∏
 */
class AIProviderManager {
  constructor() {
    this.providers = new Map();
    this.activeProvider = null;
    this.fallbackEnabled = true;
    this.healthCheckInterval = 60000; // 1 –º–∏–Ω—É—Ç–∞
    this.isInitialized = false;
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   */
  async initialize(config) {
    console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI Provider Manager...');

    try {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º OpenAI –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      if (config.openai && config.openai.apiKey) {
        const openaiProvider = new OpenAIProvider({
          name: 'openai',
          apiKey: config.openai.apiKey,
          model: config.openai.model,
          enabled: config.openai.enabled !== false,
          priority: config.openai.priority || 1,
          maxRetries: config.openai.maxRetries || 2
        });
        
        this.providers.set('openai', openaiProvider);
        console.log('‚úÖ OpenAI –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      if (config.gemini && config.gemini.apiKey) {
        const geminiProvider = new GeminiProvider({
          name: 'gemini',
          apiKey: config.gemini.apiKey,
          model: config.gemini.model,
          enabled: config.gemini.enabled !== false,
          priority: config.gemini.priority || 2,
          maxRetries: config.gemini.maxRetries || 2
        });
        
        this.providers.set('gemini', geminiProvider);
        console.log('‚úÖ Gemini –ø—Ä–æ–≤–∞–π–¥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
      }

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      await this.setActiveProvider(config.activeProvider || 'openai');
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
      this.startHealthCheck();
      
      this.isInitialized = true;
      console.log(`üéØ AI Provider Manager –≥–æ—Ç–æ–≤. –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${this.activeProvider?.name}`);
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ AI Provider Manager:', error);
      throw error;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @param {string} providerName - –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  async setActiveProvider(providerName) {
    const provider = this.providers.get(providerName);
    
    if (!provider) {
      throw new Error(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä "${providerName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    if (!provider.enabled) {
      throw new Error(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä "${providerName}" –æ—Ç–∫–ª—é—á–µ–Ω`);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
    const isAvailable = await provider.isAvailable();
    if (!isAvailable) {
      console.warn(`‚ö†Ô∏è –ü—Ä–æ–≤–∞–π–¥–µ—Ä "${providerName}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
      
      if (this.fallbackEnabled) {
        // –ò—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
        const fallbackProvider = await this.findAvailableProvider();
        if (fallbackProvider) {
          console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ fallback –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${fallbackProvider.name}`);
          this.activeProvider = fallbackProvider;
          return;
        }
      }
      
      throw new Error(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä "${providerName}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–µ—Ç fallback`);
    }

    this.activeProvider = provider;
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ${providerName}`);
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
   * @param {Buffer} imageBuffer 
   * @param {string} language 
   * @param {string} comment 
   * @returns {Promise<Object>}
   */
  async analyzeImage(imageBuffer, language = 'en', comment = '') {
    if (!this.isInitialized) {
      throw new Error('AI Provider Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    if (!this.activeProvider) {
      throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
    }

    const startTime = Date.now();

    try {
      // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
      console.log(`üîç AI –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ ${this.activeProvider.name}:`, {
        language,
        comment: comment ? comment.substring(0, 50) + '...' : '–Ω–µ—Ç',
        timestamp: new Date().toISOString()
      });

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
      const result = await this.activeProvider.analyzeImage(imageBuffer, language, comment);
      
      const duration = Date.now() - startTime;
      console.log(`‚úÖ AI –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:`, {
        provider: result.provider,
        name: result.name,
        calories: result.calories,
        confidence: result.confidence,
        duration: `${duration}ms`
      });

      return result;

    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ AI –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ ${this.activeProvider.name}:`, error.message);
      
      // –ï—Å–ª–∏ fallback –≤–∫–ª—é—á–µ–Ω, –ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
      if (this.fallbackEnabled && this.providers.size > 1) {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ fallback –∞–Ω–∞–ª–∏–∑–∞...');
        
        const fallbackProvider = await this.findAvailableProvider(this.activeProvider.name);
        if (fallbackProvider) {
          try {
            const result = await fallbackProvider.analyzeImage(imageBuffer, language, comment);
            console.log(`‚úÖ Fallback –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω —á–µ—Ä–µ–∑ ${fallbackProvider.name}`);
            return result;
          } catch (fallbackError) {
            console.error(`‚ùå Fallback –∞–Ω–∞–ª–∏–∑ —Ç–∞–∫–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω:`, fallbackError.message);
          }
        }
      }
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return this.getDefaultResult(comment, language);
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @param {string} excludeProvider - –ò—Å–∫–ª—é—á–∏—Ç—å —ç—Ç–æ—Ç –ø—Ä–æ–≤–∞–π–¥–µ—Ä
   * @returns {Promise<Object|null>}
   */
  async findAvailableProvider(excludeProvider = null) {
    const availableProviders = Array.from(this.providers.values())
      .filter(provider => 
        provider.enabled && 
        provider.name !== excludeProvider
      )
      .sort((a, b) => a.priority - b.priority);

    for (const provider of availableProviders) {
      try {
        const isAvailable = await provider.isAvailable();
        if (isAvailable) {
          return provider;
        }
      } catch (error) {
        console.error(`–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ ${provider.name} –Ω–µ—É–¥–∞—á–Ω–∞:`, error.message);
      }
    }

    return null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   * @param {string} comment 
   * @param {string} language 
   * @returns {Object}
   */
  getDefaultResult(comment, language) {
    return {
      name: comment || '–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–µ –±–ª—é–¥–æ',
      calories: 200,
      protein: 10,
      carbs: 25,
      fat: 8,
      confidence: 0.3,
      language: language || 'ru',
      provider: 'manual',
      portions: '–æ–¥–Ω–∞ –ø–æ—Ä—Ü–∏—è',
      regional: false
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   * @returns {Promise<Array>}
   */
  async getProvidersStatus() {
    const statuses = [];

    for (const [name, provider] of this.providers) {
      try {
        const isAvailable = await provider.isAvailable();
        statuses.push({
          name: provider.name,
          enabled: provider.enabled,
          available: isAvailable,
          active: provider === this.activeProvider,
          priority: provider.priority,
          info: provider.getInfo()
        });
      } catch (error) {
        statuses.push({
          name: provider.name,
          enabled: provider.enabled,
          available: false,
          active: provider === this.activeProvider,
          priority: provider.priority,
          error: error.message,
          info: provider.getInfo()
        });
      }
    }

    return statuses.sort((a, b) => a.priority - b.priority);
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @param {string} providerName 
   * @param {boolean} enabled 
   */
  setProviderEnabled(providerName, enabled) {
    const provider = this.providers.get(providerName);
    if (!provider) {
      throw new Error(`–ü—Ä–æ–≤–∞–π–¥–µ—Ä "${providerName}" –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    provider.enabled = enabled;
    console.log(`${enabled ? '‚úÖ' : '‚ùå'} –ü—Ä–æ–≤–∞–π–¥–µ—Ä ${providerName} ${enabled ? '–≤–∫–ª—é—á–µ–Ω' : '–æ—Ç–∫–ª—é—á–µ–Ω'}`);

    // –ï—Å–ª–∏ –æ—Ç–∫–ª—é—á–∏–ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä, –∏—â–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É
    if (!enabled && this.activeProvider === provider) {
      this.findAndSetAvailableProvider();
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   */
  async findAndSetAvailableProvider() {
    try {
      const availableProvider = await this.findAvailableProvider();
      if (availableProvider) {
        this.activeProvider = availableProvider;
        console.log(`üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${availableProvider.name}`);
      } else {
        this.activeProvider = null;
        console.error('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞:', error);
    }
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
   */
  startHealthCheck() {
    setInterval(async () => {
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤...');
      
      try {
        const statuses = await this.getProvidersStatus();
        const activeProviderStatus = statuses.find(s => s.active);
        
        if (activeProviderStatus && !activeProviderStatus.available) {
          console.warn(`‚ö†Ô∏è –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä ${activeProviderStatus.name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω`);
          await this.findAndSetAvailableProvider();
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤:', error);
      }
    }, this.healthCheckInterval);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
   * @returns {Object|null}
   */
  getActiveProviderInfo() {
    if (!this.activeProvider) {
      return null;
    }

    return {
      name: this.activeProvider.name,
      ...this.activeProvider.getInfo()
    };
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞
   */
  shutdown() {
    console.log('üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ AI Provider Manager...');
    this.isInitialized = false;
    this.activeProvider = null;
    this.providers.clear();
  }

  /**
   * –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è –µ–¥—ã —á–µ—Ä–µ–∑ –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä
   * @param {string} text
   * @param {string} language
   * @returns {Promise<Object>}
   */
  async analyzeText(text, language = 'en') {
    if (!this.isInitialized) {
      throw new Error('AI Provider Manager –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }
    if (!this.activeProvider) {
      throw new Error('–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞');
    }
    const startTime = Date.now();
    try {
      console.log(`üîç AI —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ ${this.activeProvider.name}:`, { language, text: text?.substring(0, 50) + '...', timestamp: new Date().toISOString() });
      const result = await this.activeProvider.analyzeText(text, language);
      const duration = Date.now() - startTime;
      console.log(`‚úÖ AI —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:`, { provider: result.provider, name: result.name, calories: result.calories, confidence: result.confidence, duration: `${duration}ms` });
      return result;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ AI —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —á–µ—Ä–µ–∑ ${this.activeProvider.name}:`, error.message);
      if (this.fallbackEnabled && this.providers.size > 1) {
        console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ fallback —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞...');
        const fallbackProvider = await this.findAvailableProvider(this.activeProvider.name);
        if (fallbackProvider) {
          try {
            const result = await fallbackProvider.analyzeText(text, language);
            console.log(`‚úÖ Fallback —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —É—Å–ø–µ—à–µ–Ω —á–µ—Ä–µ–∑ ${fallbackProvider.name}`);
            return result;
          } catch (fallbackError) {
            console.error(`‚ùå Fallback —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–∞–∫–∂–µ –Ω–µ—É–¥–∞—á–µ–Ω:`, fallbackError.message);
          }
        }
      }
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      return this.getDefaultResult(text, language);
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä (Singleton)
module.exports = new AIProviderManager(); 