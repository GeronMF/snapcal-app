/**
 * –ë–∞–∑–æ–≤—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */
class BaseAIProvider {
  constructor(config) {
    if (new.target === BaseAIProvider) {
      throw new Error('BaseAIProvider –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –Ω–∞–ø—Ä—è–º—É—é');
    }
    
    this.config = config;
    this.name = config.name;
    this.enabled = config.enabled;
    this.priority = config.priority || 1;
    this.maxRetries = config.maxRetries || 2;
  }

  /**
   * –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {Buffer} imageBuffer - –ë—É—Ñ–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {string} language - –Ø–∑—ã–∫ –∞–Ω–∞–ª–∏–∑–∞
   * @param {string} comment - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
   */
  async analyzeImage(imageBuffer, language = 'en', comment = '') {
    throw new Error('–ú–µ—Ç–æ–¥ analyzeImage –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @returns {Promise<boolean>}
   */
  async isAvailable() {
    throw new Error('–ú–µ—Ç–æ–¥ isAvailable –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥–Ω–∏–∫–µ');
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–µ
   * @returns {Object}
   */
  getInfo() {
    return {
      name: this.name,
      enabled: this.enabled,
      priority: this.priority,
      maxRetries: this.maxRetries
    };
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
   * @param {Object} result 
   * @returns {Object}
   */
  validateResult(result) {
    const defaultResult = {
      name: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –±–ª—é–¥–æ',
      calories: 100,
      protein: 0,
      carbs: 0,
      fat: 0,
      confidence: 0.5,
      language: 'ru',
      provider: this.name,
      portions: '–æ–¥–Ω–∞ –ø–æ—Ä—Ü–∏—è',
      regional: false
    };

    // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    const validated = { ...defaultResult, ...result };

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    validated.calories = this.validateNumber(validated.calories, 100, 1, 3000);
    validated.protein = this.validateNumber(validated.protein, 0, 0, 100);
    validated.carbs = this.validateNumber(validated.carbs, 0, 0, 200);
    validated.fat = this.validateNumber(validated.fat, 0, 0, 100);
    validated.confidence = this.validateNumber(validated.confidence, 0.5, 0, 1);

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏
    validated.name = validated.name || defaultResult.name;
    validated.portions = validated.portions || defaultResult.portions;
    validated.provider = this.name;

    return validated;
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è —á–∏—Å–ª–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
   * @param {*} value 
   * @param {number} defaultVal 
   * @param {number} min 
   * @param {number} max 
   * @returns {number}
   */
  validateNumber(value, defaultVal, min = 0, max = Infinity) {
    const num = parseFloat(value);
    if (isNaN(num)) return defaultVal;
    return Math.max(min, Math.min(max, num));
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} params 
   */
  logRequest(params) {
    console.log(`üîç ${this.name} AI Analysis:`, {
      language: params.language,
      comment: params.comment,
      timestamp: new Date().toISOString()
    });
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
   * @param {Object} result 
   * @param {number} duration 
   */
  logResult(result, duration) {
    console.log(`‚úÖ ${this.name} Analysis Result:`, {
      name: result.name,
      calories: result.calories,
      confidence: result.confidence,
      duration: `${duration}ms`,
      provider: this.name
    });
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
   * @param {Error} error 
   */
  logError(error) {
    console.error(`‚ùå ${this.name} Analysis Error:`, {
      message: error.message,
      provider: this.name,
      timestamp: new Date().toISOString()
    });
  }
}

module.exports = BaseAIProvider; 