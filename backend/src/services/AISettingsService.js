const mysql = require('mysql2/promise');
const { query } = require('../config/database');

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ AI –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
 */
class AISettingsService {
  constructor() {
    this.cache = new Map();
    this.cacheTimeout = 30000; // 30 —Å–µ–∫—É–Ω–¥
    this.lastCacheUpdate = 0;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ –∫–ª—é—á—É
   * @param {string} key - –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param {*} defaultValue - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * @returns {Promise<*>}
   */
  async getSetting(key, defaultValue = null) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (this.isCacheValid() && this.cache.has(key)) {
        return this.cache.get(key);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ –ë–î
      const [rows] = await query(
        'SELECT setting_value FROM ai_settings WHERE setting_key = ?',
        [key]
      );

      if (rows.length > 0) {
        const value = this.parseValue(rows[0].setting_value);
        this.cache.set(key, value);
        return value;
      }

      return defaultValue;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${key}:`, error);
      return defaultValue;
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param {string} key - –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @param {*} value - –ó–Ω–∞—á–µ–Ω–∏–µ
   * @param {string} description - –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
   * @returns {Promise<boolean>}
   */
  async setSetting(key, value, description = null) {
    try {
      const stringValue = this.stringifyValue(value);
      
      const [result] = await query(`
        INSERT INTO ai_settings (setting_key, setting_value, description)
        VALUES (?, ?, ?)
        ON DUPLICATE KEY UPDATE 
        setting_value = VALUES(setting_value),
        description = COALESCE(VALUES(description), description),
        updated_at = CURRENT_TIMESTAMP
      `, [key, stringValue, description]);

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à
      this.cache.set(key, value);
      this.lastCacheUpdate = Date.now();

      console.log(`‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ ${key} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${stringValue}`);
      return true;
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ${key}:`, error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI
   * @returns {Promise<Object>}
   */
  async getAllSettings() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
      if (this.isCacheValid() && this.cache.size > 0) {
        return Object.fromEntries(this.cache);
      }

      // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∏–∑ –ë–î
      const [rows] = await query(
        'SELECT setting_key, setting_value FROM ai_settings'
      );

      const settings = {};
      this.cache.clear();

      for (const row of rows) {
        const value = this.parseValue(row.setting_value);
        settings[row.setting_key] = value;
        this.cache.set(row.setting_key, value);
      }

      this.lastCacheUpdate = Date.now();
      return settings;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫:', error);
      return {};
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è AI Manager
   * @returns {Promise<Object>}
   */
  async getAIManagerConfig() {
    try {
      const settings = await this.getAllSettings();

      return {
        activeProvider: settings.active_ai_provider || 'openai',
        fallbackEnabled: this.parseBoolean(settings.fallback_enabled, true),
        healthCheckInterval: parseInt(settings.health_check_interval) || 60000,
        timeout: parseInt(settings.ai_timeout) || 120000,
        retryAttempts: parseInt(settings.ai_retry_attempts) || 2,
        
        openai: {
          apiKey: process.env.OPENAI_API_KEY,
          model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
          enabled: this.parseBoolean(settings.openai_enabled, true),
          priority: parseInt(settings.openai_priority) || 1,
          maxRetries: parseInt(settings.ai_retry_attempts) || 2
        },

        gemini: {
          apiKey: process.env.GEMINI_API_KEY,
          model: process.env.GEMINI_MODEL || 'gemini-1.5-flash',
          enabled: this.parseBoolean(settings.gemini_enabled, true),
          priority: parseInt(settings.gemini_priority) || 2,
          maxRetries: parseInt(settings.ai_retry_attempts) || 2
        }
      };
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ AI Manager:', error);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
      return {
        activeProvider: 'openai',
        fallbackEnabled: true,
        healthCheckInterval: 60000,
        timeout: 120000,
        retryAttempts: 2,
        
        openai: {
          apiKey: process.env.OPENAI_API_KEY,
          model: process.env.OPENAI_MODEL || 'gpt-4o-mini',
          enabled: true,
          priority: 1,
          maxRetries: 2
        },

        gemini: {
          apiKey: process.env.GEMINI_API_KEY,
          model: process.env.GEMINI_MODEL || 'gemini-1.5-flash',
          enabled: true,
          priority: 2,
          maxRetries: 2
        }
      };
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @param {string} provider - –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @returns {Promise<boolean>}
   */
  async setActiveProvider(provider) {
    const validProviders = ['openai', 'gemini'];
    
    if (!validProviders.includes(provider)) {
      throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`);
    }

    return await this.setSetting('active_ai_provider', provider, 'Currently active AI provider');
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @param {string} provider - –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @param {boolean} enabled - –í–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–æ–≤–∞–π–¥–µ—Ä
   * @returns {Promise<boolean>}
   */
  async setProviderEnabled(provider, enabled) {
    const validProviders = ['openai', 'gemini'];
    
    if (!validProviders.includes(provider)) {
      throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`);
    }

    const key = `${provider}_enabled`;
    const description = `Enable/disable ${provider} provider`;
    
    return await this.setSetting(key, enabled.toString(), description);
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @param {string} provider - –ò–º—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞
   * @param {number} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç (–º–µ–Ω—å—à–µ = –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
   * @returns {Promise<boolean>}
   */
  async setProviderPriority(provider, priority) {
    const validProviders = ['openai', 'gemini'];
    
    if (!validProviders.includes(provider)) {
      throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä: ${provider}`);
    }

    if (priority < 1 || priority > 10) {
      throw new Error('–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 10');
    }

    const key = `${provider}_priority`;
    const description = `Priority of ${provider} provider (lower = higher priority)`;
    
    return await this.setSetting(key, priority.toString(), description);
  }

  /**
   * –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
   * @param {Object} stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
   * @returns {Promise<boolean>}
   */
  async logAIUsage(stats) {
    try {
      const {
        provider,
        userId = null,
        success = false,
        responseTime = null,
        errorMessage = null,
        language = null
      } = stats;

      await query(`
        INSERT INTO ai_usage_stats 
        (provider, user_id, success, response_time, error_message, language)
        VALUES (?, ?, ?, ?, ?, ?)
      `, [provider, userId, success, responseTime, errorMessage, language]);

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI:', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI
   * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
   * @returns {Promise<Object>}
   */
  async getAIUsageStats(days = 7) {
    try {
      const [rows] = await query(`
        SELECT 
          provider,
          COUNT(*) as total_requests,
          SUM(success) as successful_requests,
          AVG(response_time) as avg_response_time,
          DATE(created_at) as date
        FROM ai_usage_stats 
        WHERE created_at >= DATE_SUB(NOW(), INTERVAL ? DAY)
        GROUP BY provider, DATE(created_at)
        ORDER BY date DESC, provider
      `, [days]);

      return rows;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ AI:', error);
      return [];
    }
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
   */
  clearCache() {
    this.cache.clear();
    this.lastCacheUpdate = 0;
    console.log('üóëÔ∏è –ö—ç—à –Ω–∞—Å—Ç—Ä–æ–µ–∫ AI –æ—á–∏—â–µ–Ω');
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫—ç—à–∞
   * @returns {boolean}
   */
  isCacheValid() {
    return (Date.now() - this.lastCacheUpdate) < this.cacheTimeout;
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å—Ç—Ä–æ–∫–∏
   * @param {string} value 
   * @returns {*}
   */
  parseValue(value) {
    if (value === 'true') return true;
    if (value === 'false') return false;
    if (value === 'null') return null;
    if (/^\d+$/.test(value)) return parseInt(value);
    if (/^\d+\.\d+$/.test(value)) return parseFloat(value);
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
    try {
      return JSON.parse(value);
    } catch {
      return value;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫—É
   * @param {*} value 
   * @returns {string}
   */
  stringifyValue(value) {
    if (typeof value === 'string') return value;
    if (typeof value === 'boolean') return value.toString();
    if (typeof value === 'number') return value.toString();
    if (value === null) return 'null';
    
    try {
      return JSON.stringify(value);
    } catch {
      return String(value);
    }
  }

  /**
   * –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ –±—É–ª–µ–≤–æ –∑–Ω–∞—á–µ–Ω–∏–µ
   * @param {*} value - –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
   * @param {boolean} defaultValue - –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
   * @returns {boolean}
   */
  parseBoolean(value, defaultValue = false) {
    if (value === null || value === undefined) {
      return defaultValue;
    }
    
    if (typeof value === 'boolean') {
      return value;
    }
    
    if (typeof value === 'string') {
      return value.toLowerCase() === 'true';
    }
    
    return Boolean(value);
  }
}

module.exports = AISettingsService; 