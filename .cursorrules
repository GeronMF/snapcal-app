# Правила для AI в проекте SnapCal

## Общие принципы
- Всегда отвечать на русском языке
- Использовать современные практики разработки
- Следовать принципам чистого кода
- Приоритет безопасности и производительности

## Технологический стек проекта
- Frontend: React Native/Expo приложение (локальная разработка через Expo Go)
- Backend: Node.js/Express.js (порт 3333)
- База данных: MySQL (продакшн сервер)
- Домен: snapcal.fun с обратным прокси на localhost:3333
- Контейнеризация: Docker
- Развертывание: Docker Compose
- Мультиязычность: поддержка 5 языков (en, es, pl, ru, uk)

## Доступ к продакшн серверу
- **SSH подключение**: `ssh snapcalfun@decloud2376.zahid.host -p 32762`
- **Пароль**: `5c3c0bcc-8b91-45c9-8610-9dc02ad53cb5`
- **Путь к бэкенду**: `/home/snapcalfun/www/backend`
- **Домен**: snapcal.fun
- **Порт приложения**: 3333
- **База данных**: MySQL на том же сервере

## Стиль кодирования
- Использовать ES6+ синтаксис и TypeScript
- Предпочитать функциональные компоненты React Native
- Использовать async/await вместо Promise.then()
- Комментарии на русском языке
- Переменные и функции на английском языке
- Поддерживать мультиязычность через i18n
- Использовать Expo для React Native разработки

## Структура проекта
```
SNAPCAL13052025/
├── backend/                    # Node.js/Express сервер (порт 3333)
│   ├── src/                   # Исходный код сервера
│   ├── public/                # Статические файлы и загруженные фото
│   ├── Dockerfile            # Docker конфигурация
│   ├── package.json          # Зависимости бэкенда
│   └── snapcal.db           # MySQL база данных (продакшн)
├── frontend/                  # React Native/Expo приложение
│   ├── app/                  # Основные экраны приложения
│   ├── components/           # Переиспользуемые компоненты
│   ├── contexts/             # React контексты
│   ├── hooks/                # Пользовательские хуки
│   ├── i18n/                 # Интернационализация
│   │   └── translations/     # Переводы (en, es, pl, ru, uk)
│   ├── src/screens/          # Экраны приложения
│   ├── types/                # TypeScript типы
│   ├── utils/                # Утилиты
│   └── package.json          # Зависимости фронтенда
├── database/                  # Скрипты и миграции БД
└── deploy/                    # Конфигурация развертывания
```

## При создании/изменении кода:
1. Всегда проверять существующую структуру проекта
2. Сохранять совместимость с текущей архитектурой
3. Добавлять обработку ошибок
4. Включать валидацию данных
5. Следовать принципам безопасности
6. **ОСТОРОЖНО с продакшн данными** - всегда тестировать изменения БД
7. Учитывать, что frontend подключается к реальному продакшн серверу
8. Все API endpoints должны работать через домен snapcal.fun

## Процесс разработки
- **Frontend**: Тестируется локально через Expo Go
- **Backend**: Доработки делаются локально
- **При изменении backend файлов**: AI ОБЯЗАТЕЛЬНО указывает какие файлы и куда загружать на сервер
- **Развертывание**: AI указывает точные пути файлов для загрузки на продакшн

## Приоритеты при разработке:
1. Функциональность
2. Безопасность
3. Производительность
4. Масштабируемость
5. Удобство сопровождения

## Архитектура развертывания
- **Frontend**: Разработка локально через Expo Go, подключение к продакшн API
- **Backend**: Продакшн сервер с Node.js на порту 3333
- **Домен**: snapcal.fun с настроенным обратным прокси
- **База данных**: MySQL на продакшн сервере с реальными данными клиентов
- **Файлы**: Загруженные фото хранятся в папке backend/public/
- **API**: Все запросы frontend → https://snapcal.fun → localhost:3333

## Мультиязычность
- Поддерживаемые языки: английский (en), испанский (es), польский (pl), русский (ru), украинский (uk)
- Все текстовые строки должны использовать ключи переводов из i18n
- При добавлении новых текстов создавать переводы для всех 5 языков
- Использовать структурированные ключи переводов (например: "screens.login.title")
- Локализация должна учитывать культурные особенности

## Запрещено:
- Создавать файлы без необходимости
- Игнорировать существующие паттерны проекта
- Создавать уязвимости в безопасности
- Нарушать архитектуру приложения
- Хардкодить текстовые строки вместо использования i18n
- **Делать разрушительные изменения в продакшн БД без предупреждения**
- Хардкодить localhost URLs (использовать переменные окружения) 